module.exports = function (str) {
   // \S*\s* -> x= 前面可以是任何的字符
  // x=(?=\d+): x= 后面需要紧跟着 正整数才能匹配成功
  // (?=\d+) 不占匹配位置,下一个还是从 x= 后面开始进行匹配
  // (\d+) 表示进行分组, x= 后一个位置开始进行匹配正整数, 标记为 分组1
  // \s*\S* 表示 (\d+) 后可以跟上任何字符

  // ------  取出分组一的字符
  // var reg = /\S*\s*x=(?=\S+)(\S+)\s*\S*/;
  // return str.replace(reg, '$1'); // 取出分组一的字符

  // ---- 示例
  /**
   *  x=5
   * 开始匹配 \S*\s*, * 表示可以是0次或者多次,所以'x'前面是空匹配成功
   * 接着匹配 x=, 匹配成功
   * 匹配 (?=\d+), x= 后面紧跟着 5, 匹配成功,
   * (?=\d+)不占匹配位置, 还是在 5 的位置开始匹配 (\d+)
   * 匹配成功, \s*\S* 匹配同一, 匹配成功,最后返回
   * ["x=5", "5", index: 0, input: "x=5", groups: undefined]
   */

  /**
   * abc x=5
   * 开始匹配 \S*\s*, * 表示可以是0次或者多次,所以 'abc '匹配成功
   * 接着匹配 x=, 匹配成功
   * 匹配 (?=\d+), x= 后面紧跟着 5, 匹配成功,
   * (?=\d+)不占匹配位置, 还是在 5 的位置开始匹配 (\d+)
   * 匹配成功, \s*\S* 匹配同一, 匹配成功,最后返回
   * ["abc x=5", "5", index: 0, input: "x=5", groups: undefined]
   */

  /**
   * x=abc
   * 开始匹配 \S*\s*, * 表示可以是0次或者多次, 所以'x'前面是空匹配成功
   * 接着匹配 x=, 匹配成功
   * 匹配 (?=\d+), x= 后面紧跟着 abc, 不是正整数, 匹配失败
   * 返回结果 null
   */

  /**
   * beep x=123123 boop
   * 开始匹配 \S*\s*, * 表示可以是0次或者多次,所以 'beep '匹配成功
   * 接着匹配 x=, 匹配成功
   * 匹配 (?=\d+), x= 后面紧跟着 '123123', 匹配成功,
   * (?=\d+)不占匹配位置, 还是在 '123123' 的位置开始匹配 (\d+)
   * 匹配成功, \s*\S* 匹配同一, 匹配成功,最后返回
   * ["beep x=123123 boop", "123123", index: 0, input: "beep x=123123 boop"]
   */
  
  var reg = /\S*\s*x=(?=\d+)(\d+)\s*\S*/;
  return str.match(reg) ? str.match(reg)[1] : str.match(reg);
}